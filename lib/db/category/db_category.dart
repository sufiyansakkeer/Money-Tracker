import 'package:flutter/material.dart';
import 'package:hive/hive.dart';
import 'package:money_track/models/categories_model/category_model.dart';

// const categoryDBName = 'category-name';

// abstract class CategoryDBFunction {
//   Future<List<CategoryModel>> getAllCategory();
//   Future<void> insertCategory(CategoryModel value);
//   Future<void> deleteCategory(String categoryId);
// }

// class CategoryDB implements CategoryDBFunction {
//   CategoryDB._internal();

//   static CategoryDB instanse = CategoryDB._internal();

//   factory CategoryDB() {
//     return instanse;
//   }

//   ValueNotifier<List<CategoryModel>> incomeCategoryNotifierListener =
//       ValueNotifier([]);
//   ValueNotifier<List<CategoryModel>> expenseCategoryNotifierListener =
//       ValueNotifier([]);

//   @override
//   Future<void> insertCategory(CategoryModel value) async {
//     final categoryDB = await Hive.openBox<CategoryModel>(categoryDBName);
//     //here we used put instead of add ,
//     //because if we use add the id will be generated by the hive only that id we can't delete ,
//     //because we don't know the id ,
//     // but if we used put we can delete it
//     await categoryDB.put(value.id, value);
//     log(' working');
//     //here we added notify listener so then only the widget get updated ,
//     // because notify listener will tell the widget to update
//     // incomeCategoryNotifierListener.notifyListeners();
//     // expenseCategoryNotifierListener.notifyListeners();
//     refreshUI();
//   }

//   @override
//   Future<List<CategoryModel>> getAllCategory() async {
//     final categoryDB = await Hive.openBox<CategoryModel>(categoryDBName);
//     // incomeCategoryNotifierListener.value.clear();
//     // expenseCategoryNotifierListener.value.clear();
//     //here we need to get all the data's ,it is in a list form thats why we convert it into list.
//     // incomeCategoryNotifierListener.notifyListeners();
//     // expenseCategoryNotifierListener.notifyListeners();

//     return categoryDB.values.toList();
//   }

//   Future<void> refreshUI() async {
//     final allCategories = await getAllCategory();
//     incomeCategoryNotifierListener.value.clear();
//     expenseCategoryNotifierListener.value.clear();
//     //to clear the category before adding again , it will avoid duplication
//     //here it will separate the category into income and expense
//     await Future.forEach(allCategories, (CategoryModel category) {
//       if (category.type == CategoryType.income) {
//         incomeCategoryNotifierListener.value.add(category);
//         // log('${category.categoryName}  ${category.type}.');
//       } else {
//         expenseCategoryNotifierListener.value.add(category);
//         // log('${category.categoryName} ${category.type}.');
//       }
//     });
//     incomeCategoryNotifierListener.notifyListeners();
//     expenseCategoryNotifierListener.notifyListeners();
//   }

//   @override
//   Future<void> deleteCategory(String categoryId) async {
//     final categoryDB = await Hive.openBox<CategoryModel>(categoryDBName);
//     await categoryDB.delete(categoryId);
//     // getAllCategory();
//     // if (categoryId == CategoryType.income) {
//     //   await categoryDB.delete(categoryId);
//     // } else {
//     //   await categoryDB.delete(categoryId);
//     // }
//     // incomeCategoryNotifierListener.value.clear();
//     // expenseCategoryNotifierListener.value.clear();
//     refreshUI();
//   }
// }
const CATEGORY_DB_NAME = 'category-database';

abstract class CatageryDbFunctions {
  Future<List<CategoryModel>> getCategories();
  Future<void> insertCategory(CategoryModel value);
  Future<void> deleteCategory(String categoryID);
}

class CategoryDb implements CatageryDbFunctions {
  CategoryDb._internal();

  static CategoryDb instance = CategoryDb._internal();

  factory CategoryDb() {
    return instance;
  }

  ValueNotifier<List<CategoryModel>> incomeCategoryListListener =
      ValueNotifier([]);
  ValueNotifier<List<CategoryModel>> expenseCategoryListListener =
      ValueNotifier([]);

  @override
  Future<void> insertCategory(CategoryModel value) async {
    final categoryDB = await Hive.openBox<CategoryModel>(CATEGORY_DB_NAME);
    await categoryDB.put(value.id, value);
    refreshUI();
  }

  @override
  Future<List<CategoryModel>> getCategories() async {
    final categoryDB = await Hive.openBox<CategoryModel>(CATEGORY_DB_NAME);
    return categoryDB.values.toList();
  }

  Future<void> refreshUI() async {
    final allCategories = await getCategories();
    incomeCategoryListListener.value.clear();
    expenseCategoryListListener.value.clear();
    await Future.forEach(
      allCategories,
      (CategoryModel category) {
        if (category.type == CategoryType.income) {
          incomeCategoryListListener.value.add(category);
        } else {
          expenseCategoryListListener.value.add(category);
        }
      },
    );
    incomeCategoryListListener.notifyListeners();
    expenseCategoryListListener.notifyListeners();
  }

  @override
  Future<void> deleteCategory(String categoryID) async {
    final categoryDB = await Hive.openBox<CategoryModel>(CATEGORY_DB_NAME);
    await categoryDB.delete(categoryID);
    refreshUI();
  }
}
